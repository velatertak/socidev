openapi: 3.0.0
info:
  title: Social Developer API
  version: 1.0.0
  description: |
    API documentation for the Social Developer platform.
    This API provides endpoints for managing social media automation tasks, payments, and user accounts.

servers:
  - url: http://localhost:3000/api
    description: Development server
  - url: https://api.socialdeveloper.com/api
    description: Production server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

  schemas:
    Error:
      type: object
      properties:
        status:
          type: string
          enum: [error, fail]
        message:
          type: string
        errors:
          type: array
          items:
            type: object
            properties:
              field:
                type: string
              message:
                type: string

    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        email:
          type: string
          format: email
        firstName:
          type: string
        lastName:
          type: string
        username:
          type: string
        balance:
          type: number
          format: float
        userMode:
          type: string
          enum: [taskDoer, taskGiver]
        createdAt:
          type: string
          format: date-time

    SocialAccount:
      type: object
      properties:
        id:
          type: string
          format: uuid
        platform:
          type: string
          enum: [instagram, youtube]
        username:
          type: string
        status:
          type: string
          enum: [active, inactive, limited]
        lastChecked:
          type: string
          format: date-time

    Order:
      type: object
      properties:
        id:
          type: string
          format: uuid
        service:
          type: string
        platform:
          type: string
          enum: [instagram, youtube]
        targetUrl:
          type: string
        quantity:
          type: integer
        startCount:
          type: integer
        remainingCount:
          type: integer
        status:
          type: string
          enum: [pending, processing, completed, failed]
        speed:
          type: string
          enum: [normal, fast, express]
        amount:
          type: number
          format: float

    Task:
      type: object
      properties:
        id:
          type: string
          format: uuid
        type:
          type: string
          enum: [likes, followers, views, comments]
        status:
          type: string
          enum: [pending, running, paused, completed, failed]
        progress:
          type: integer
        targetCount:
          type: integer
        completedCount:
          type: integer
        errorCount:
          type: integer

paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
                - username
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  minLength: 6
                firstName:
                  type: string
                lastName:
                  type: string
                username:
                  type: string
                  minLength: 3
                phone:
                  type: string
      responses:
        '201':
          description: User registered successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '400':
          description: Validation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  token:
                    type: string
        '401':
          description: Invalid credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /social-accounts:
    get:
      tags:
        - Social Accounts
      summary: Get user's social accounts
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: platform
          schema:
            type: string
            enum: [instagram, youtube]
      responses:
        '200':
          description: List of social accounts
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SocialAccount'

    post:
      tags:
        - Social Accounts
      summary: Add a new social account
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - platform
                - username
                - credentials
              properties:
                platform:
                  type: string
                  enum: [instagram, youtube]
                username:
                  type: string
                credentials:
                  type: object
                  properties:
                    email:
                      type: string
                    password:
                      type: string
      responses:
        '201':
          description: Social account added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialAccount'

  /orders:
    get:
      tags:
        - Orders
      summary: Get user's orders
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: status
          schema:
            type: string
            enum: [pending, processing, completed, failed]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of orders
          content:
            application/json:
              schema:
                type: object
                properties:
                  orders:
                    type: array
                    items:
                      $ref: '#/components/schemas/Order'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      totalPages:
                        type: integer

    post:
      tags:
        - Orders
      summary: Create a new order
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - platform
                - service
                - targetUrl
                - quantity
              properties:
                platform:
                  type: string
                  enum: [instagram, youtube]
                service:
                  type: string
                targetUrl:
                  type: string
                quantity:
                  type: integer
                speed:
                  type: string
                  enum: [normal, fast, express]
                  default: normal
      responses:
        '201':
          description: Order created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Order'

  /tasks:
    get:
      tags:
        - Tasks
      summary: Get available tasks
      security:
        - BearerAuth: []
      parameters:
        - in: query
          name: platform
          schema:
            type: string
            enum: [instagram, youtube]
        - in: query
          name: type
          schema:
            type: string
            enum: [likes, followers, views, comments]
        - in: query
          name: page
          schema:
            type: integer
            default: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
      responses:
        '200':
          description: List of available tasks
          content:
            application/json:
              schema:
                type: object
                properties:
                  tasks:
                    type: array
                    items:
                      $ref: '#/components/schemas/Task'
                  pagination:
                    type: object
                    properties:
                      total:
                        type: integer
                      page:
                        type: integer
                      totalPages:
                        type: integer

  /tasks/{id}/start:
    post:
      tags:
        - Tasks
      summary: Start a task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - deviceId
              properties:
                deviceId:
                  type: string
                  format: uuid
      responses:
        '200':
          description: Task started successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /tasks/{id}/complete:
    post:
      tags:
        - Tasks
      summary: Complete a task
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: id
          required: true
          schema:
            type: string
            format: uuid
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - proof
              properties:
                proof:
                  type: object
                  description: Task completion proof
      responses:
        '200':
          description: Task completed successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Task'

  /balance:
    get:
      tags:
        - Balance
      summary: Get user's balance
      security:
        - BearerAuth: []
      responses:
        '200':
          description: User's balance
          content:
            application/json:
              schema:
                type: object
                properties:
                  balance:
                    type: number
                    format: float

  /balance/deposit:
    post:
      tags:
        - Balance
      summary: Add balance
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - method
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                method:
                  type: string
                  enum: [bank_transfer, credit_card, crypto]
                details:
                  type: object
      responses:
        '201':
          description: Deposit created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  amount:
                    type: number
                    format: float
                  status:
                    type: string
                    enum: [pending, completed]

  /balance/withdraw:
    post:
      tags:
        - Balance
      summary: Withdraw balance
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - amount
                - method
              properties:
                amount:
                  type: number
                  format: float
                  minimum: 0.01
                method:
                  type: string
                  enum: [bank_transfer, crypto]
                details:
                  type: object
      responses:
        '201':
          description: Withdrawal created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                  amount:
                    type: number
                    format: float
                  status:
                    type: string
                    enum: [pending, processing, completed]